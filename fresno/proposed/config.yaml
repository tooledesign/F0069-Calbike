#############################################
# Default configuration file for pyBNA
#
# Optional settings are commented out
# In general, optional parameters can be
# deduced through code so you'd only
# want to specify these if you have an
# unusual circumstance
#############################################
srid: 26911
units: mi # units for speed limit, width, etc.
          # Either km (metric) or mi (imperial), default is "mi" if not given.
          # Note this only affects OSM importing and the units used for
          # LTS lookups. Any distances given in the rest of this config file
          # are in the units of the map projection

db:
    user: "gis"
    password: "gis"
    host: "192.168.60.227"
    dbname: "calbike"

bna:
    boundary:
        table: "received.fresno_boundary" # tables are optionally schema-qualified
        geom: "geom"

    blocks:
        table: "generated.fresno_blocks"
        uid: "blockid10"
        population: "pop10"
        geom: "geom"
        roads_tolerance: 15     # determines whether a road is considered "connected" to a block
        min_road_length: 30     # determines whether a road is considered "connected" to a block

    network:
        roads:
            table: "generated.fresno_proposed_streets"
            geom: "geom"
            uid: "id"
            source_column: "source"
            target_column: "target"
            oneway: {name: "oneway", forward: "forward", backward: "backward"}
            stress:
                segment:
                    forward: fwd_seg_stress
                    backward: bwd_seg_stress
                crossing:
                    forward: fwd_int_stress
                    backward: bwd_int_stress
        intersections:
            table: "generated.fresno_proposed_ints"
            geom: "geom"
            uid: "id"
            cluster_distance: 5
        edges:
            table: "generated.fresno_proposed_edges"
            source_column: "source_node"
            target_column: "target_node"
            stress_column: "edge_stress"
            cost_column: "edge_cost"
            id_column: id
        nodes:
            table: "generated.fresno_proposed_nodes"
            id_column: id

    connectivity:
        table: "automated.fresno_proposed_connected_blocks"
        source_column: "source_id"
        target_column: "target_id"
        max_distance: 2680
        max_detour: 25      # given as a whole number percentage (i.e. 25 == 25%)
        detour_agnostic_threshold: 400  # under this distance, detour is ignored
        max_stress: 2

    destinations:
      - name: people
        weight: 15
        table: "generated.fresno_blocks"
        method: percentage
        datafield: pop10
        maxpoints: 100
        breaks: {0.03: 10, 0.2: 40, 0.5: 80}
        uid: blockid10
        # filter: "filter language here"
      - name: opportunity
        weight: 20
        subcats:
          - name: employment
            weight: 35
            table: "received.ca_jobs"
            method: percentage
            datafield: jobs
            maxpoints: 100
            breaks: {0.03: 10, 0.2: 40, 0.5: 80}
            uid: blockid10
          - name: schools
            weight: 35
            table: bna_schools
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='school']"
          - name: colleges
            weight: 10
            table: bna_colleges
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='college']"
          - name: universities
            weight: 20
            table: bna_universities
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='university']"
      - name: core_services
        weight: 20
        subcats:
          - name: doctors
            weight: 20
            table: bna_doctors
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='doctors']"
                - "['amenity'='doctor']"
                - "['amenity'='clinic']"
          - name: dentists
            weight: 10
            table: bna_dentists
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='dentist']"
          - name: hospitals
            weight: 20
            table: bna_hospitals
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='hospital']"
                - "['amenity'='hospitals']"
          - name: pharmacies
            weight: 10
            table: bna_pharmacies
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='pharmacy']"
          - name: supermarkets
            weight: 25
            table: bna_supermarkets
            method: count
            maxpoints: 100
            breaks: {1: 60, 2: 20}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['shop'='supermarket']"
          - name: social_services
            weight: 15
            table: bna_social_services
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='social_facility']"
      - name: recreation
        weight: 15
        subcats:
          - name: parks
            weight: 40
            table: bna_parks
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='park']"
                - "['leisure'='park']"
                - "['leisure'='nature_reserve']"
                - "['leisure'='playground']"
        #   - name: trails
        #     weight: 35
        #     table: bna_paths
        #     method: count
        #     maxpoints: 100
        #     breaks: {1: 70, 2: 20}
        #     method: trails
          - name: community_centers
            weight: 25
            table: bna_community_centers
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            geom: geom_pt
            osm_tags_query:
                - "['amenity'='community_centre']"
                - "['amenity'='community_center']"
      - name: retail
        weight: 15
        table: bna_retail
        method: count
        maxpoints: 100
        breaks: {1: 40, 2: 20, 3: 10}
        uid: id
        geom: geom_pt
        osm_tags_query:
            - "['landuse'='retail']"
      - name: transit
        weight: 15
        table: bna_transit
        method: count
        maxpoints: 100
        breaks: {1: 60}
        uid: id
        geom: geom_pt
        osm_tags_query:
            - "['amenity'='bus_station']"
            - "['railway'='station']"
            - "['public_transport'='station']"
      - name: hsr
        weight: 0
        table: "generated.fresno_hsr"
        method: count
        maxpoints: 100
        breaks: {1: 100}
        uid: id
        geom: geom

stress:
    lookup_tables:
        shared: "generated.stress_shared"
        bike_lane: "generated.stress_bike_lane"
        crossing: "generated.stress_crossing"

    segment:
        forward:
            lanes: ft_lanes
            oneway: {name: "oneway", val: "forward"}    # given as a pair (column_name, value)
            # aadt: aadt
            # centerline: {name: "centerline", val: 1}  # given as a pair (column_name, value)
            # low_parking: {name: "low_parking", val: TRUE}
            speed: speed_limit
            parking: {name: "ft_park", val: TRUE}
            # parking_width: ft_park_width
            bike_infra: {name: "ft_bike_infra", lane: "lane", buffered_lane: "buffered_lane", track: "track", path: "path"}
            bike_lane_width: ft_bike_infra_width
        backward:
            lanes: tf_lanes
            oneway: {name: "oneway", val: "backward"}
            speed: speed_limit
            parking: {name: "tf_park", val: TRUE}
            bike_infra: {name: "tf_bike_infra", lane: "lane", buffered_lane: "buffered_lane", track: "track", path: "path"}
            # bike_lane_width: tf_bike_infra_width

    crossing:
        intersection_tolerance: 1
        control:
            # control is required
            table: "generated.fresno_proposed_ints"
            geom: geom
            column:
                name: "control"
                four_way_stop: "stop"
                signal: "signal"
                rrfb: "rrfb"
                hawk: "hawk"
        island:
            table: "generated.fresno_proposed_ints"
            geom: geom
            column:
                name: "island"
                value: True
        forward:
            # lanes: ft_cross_lanes
            # speed: ft_speed_limit
            # control: ft_control
            # island: ft_island
        backward:
            # lanes: tf_cross_lanes
            # speed: tf_speed_limit
            # control: tf_control
            # island: tf_island

    assumptions:
        # These are assumptions we make to cover holes in the data. Assumptions
        # must match one of the values in a stress target.
        # Assumptions are entered as a where clause and a value. Note that each
        # clause is entered as a list item (with a dash)
        # An "else" statement can be included at the end if desired
        # A "*" matches everything (i.e. applied universally)
        segment:
            lanes:
                - where: "functional_class IN ('primary','secondary')"
                  val: 2
                - where: "functional_class IN ('tertiary')"
                  val: 1
                - where: "functional_class IN ('unclassified','residential','living_street')"
                  val: 0
                - else: 1
            speed:
                - where: "functional_class IN ('primary','secondary')"
                  val: 40
                - where: "functional_class = 'tertiary'"
                  val: 30
                - where: "functional_class IN ('unclassified','residential')"
                  val: 25
                - where: "functional_class = 'living_street'"
                  val: 20
                - else: 30
            width:
                - where: "*"
                  val: 50
            parking:
                - where: "*"
                  val: True
            low_parking:
                - where: "functional_class IN ('primary','secondary')"
                  val: False
                - where: "functional_class = 'tertiary'"
                  val: False
                - else: False
            parking_width:
                - where: "*"
                  val: 8
            bike_lane_width:
                - where: "*"
                  val: 5
            centerline:
                - where: "functional_class IN ('primary','secondary','tertiary')"
                  val: True
                - where: "functional_class IN ('unclassified','residential','living_street')"
                  val: False
                - else: True
            aadt:
                - where: "functional_class IN ('primary','secondary')"
                  val: 20000
                - where: "functional_class = 'tertiary'"
                  val: 10000
                - where: "functional_class IN ('unclassified','residential')"
                  val: 500
                - where: "functional_class = 'living_street'"
                  val: 100
                - else: 20000

        crossing:
            priority:
                # This section allows us to define priority rules that assume
                # a crossing is low stress because it is given priority (i.e.
                # doesn't yield to cross traffic) or because it is assumed to
                # be signal-controlled
                #   where: matches the streets where the score should be applied.
                #   meets: this is used to match the cross streets, if a match
                #       is found priority is given. A * matches everything.
                - where: "functional_class = 'primary'"
                  meets: "*"
                - where: "functional_class = 'secondary'"
                  meets: "*"
                - where: "functional_class = 'tertiary'"
                  meets: "functional_class IN ('residential','unclassified')"
